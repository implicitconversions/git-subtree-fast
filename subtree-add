#!/bin/bash

for item; do
    [[ $item == --help ]] && SHOW_HELP=1 && continue;
done

(( SHOW_HELP )) && {
    cat << BOOKENDS
usage: add.sh DIRNAME URL [BRANCH_NAME]
Creates a git subtree at a DIRNAME, cloned from a given URL. Uses --squash followed
by 'git subtree split --rejoin' to ensure the tree is in good efficient working order.

example:
  add.sh libawesome https://github.com/libawesome.git main
BOOKENDS
    exit
}

mydir=$(dirname ${BASH_SOURCE[0]})

subtree_dir=$1
url=$2
branch=${3:-main}

[[ $subtree_dir && $url ]] || {
    >&2 echo "expected at least two arguments. try --help for usage."
    exit 1
}

set -e

$mydir/git-subtree-fast.sh add --squash --prefix $subtree_dir "$url" $branch

# was investigating using subtree-split to reduce "push" time (eg where it needs to scan all commits), but
# seems it only works once there's some changes to the subtree made, or such. That's getting too heavy
# handed to do automatically so leaving this as it is... --jstine

#git subtree split --squash --rejoin --prefix $subtree_dir

sed "\,^$subtree_dir,d" -i $mydir/subtree-config.txt || :
printf "%s %s\n" $subtree_dir $url >> $mydir/subtree-config.txt
sort -u $mydir/subtree-config.txt -o $mydir/subtree-config.txt
