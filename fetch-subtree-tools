#!/bin/bash

# This script is built to support two modes of installation:
#  (a) self-update-in-place
#  (b) first-time install to a specific location

mydir="$(dirname "${BASH_SOURCE[0]}")"
target_dir="${1:-$mydir}"
branch=main
url=https://raw.githubusercontent.com/implicitconversions/git-subtree-fast/$branch



command -v cygpath > /dev/null || {
    # if cygpath doesn't exist, assume we're running a true unix system.
    # feign away cygpath by just echoing all valid inputs in the way cygpath would echo them.
    function cygpath() {
        local item endargs
        local POSITIONAL=()
        local abspath=0
        for item; do
            (( endargs )) && {
                POSITIONAL+=( "$item" )
                continue
            }
            case "$item" in
                -a|--absolute) abspath=1 ;;
                --)   endargs=1 ;;
                -*)   ;;
                *)    POSITIONAL+=( "$item" )
            esac
        done
        
        (( abspath )) && {
            realpath -s -m "${POSITIONAL[@]}"
            return
        }

        printf "%s\n" "${POSITIONAL[@]}"
    }
}

set -e

# need to download the updater first in case it updates itself.
# use bash exec to to do so, to avoid bash blowing up if the file changed.
[[ "$(cygpath -a "$target_dir")" == "$(cygpath -a "$mydir")" ]] || NO_AUTO_UPDATE=1

(( INSTALL_IS_SECOND_RUN || NO_AUTO_UPDATE )) || {
    echo "Performing self-update step..."
    exec bash -c "curl $url/fetch-subtree-tools -o '$target_dir/fetch-subtree-tools' && chmod +x '$target_dir/fetch-subtree-tools' && export INSTALL_IS_SECOND_RUN=1 && '${BASH_SOURCE[0]}'"
}

echo "Fetching scripts into $(realpath "$target_dir")"

files_to_fetch=(
    subtree-add
    subtree-pull
    subtree-push
    git-subtree-fast
)

for item in "${files_to_fetch[@]}"; do
    echo "Downloading $url/$item -> $target_dir/$item"
    curl -sS -o "$target_dir/$item" $url/$item > /dev/null
    chmod +x "$target_dir/$item"
done

cd $target_dir
git_dir=$(git rev-parse --show-toplevel 2> /dev/null) && [[ $git_dir ]] && {
    echo "Target dir appears to be a git dir. Adding files and applying -x ..."
    git update-index --add --chmod +x "${files_to_fetch[@]}"
    echo "Finished applying execute bit (-x) to the git index."
} || :

echo "Fetch of subtree commands completed successfully."
